# import r2r_dac as r2r
# import signal_generator as sg
# import time 

# A = 3.2
# si_freq = 10
# samp_freq = 1000
import r2r_dac as r2r
import signal_generator as sg
import time

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞
amplitude = 3.2          # –í–æ–ª—å—Ç—ã
signal_frequency = 10    # –ì—Ü (—á–∞—Å—Ç–æ—Ç–∞ —Å–∏–Ω—É—Å–æ–∏–¥—ã)
sampling_frequency = 1000  # –ì—Ü (—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –≤ —Å–µ–∫—É–Ω–¥—É)

# =================== –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê ===================
dac = None

try:
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¶–ê–ü (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ–∞–π–ª r2r_dac.py —Å –∫–ª–∞—Å—Å–æ–º R2R_DAC)
    dac = r2r.R2R_DAC(
        gpio_bits=[16, 20, 21, 25, 26, 17, 27, 22],  # BCM –Ω–æ–º–µ—Ä–∞ –ø–∏–Ω–æ–≤
        dynamic_range=3.3,                            # –æ–ø–æ—Ä–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
        verbose=False                                 # –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    )

    print(f"[SINUS] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—É—Å–æ–∏–¥—ã: {signal_frequency} –ì—Ü, –∞–º–ø–ª–∏—Ç—É–¥–∞ {amplitude} –í, –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è {sampling_frequency} –ì—Ü")

    start_time = time.time()  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

    while True:
        current_time = time.time() - start_time  # –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–Ω—É—Å–∞ –æ—Ç 0 –¥–æ 1
        sin_value = sg.get_sin_wave_amplitude(signal_frequency, current_time)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
        voltage = sin_value * amplitude

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¶–ê–ü
        dac.set_voltage(voltage)

        # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        sg.wait_for_sampling_period(sampling_frequency)

except KeyboardInterrupt:
    print("\n\nüëã –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
finally:
    if dac is not None:
        dac.deinit()